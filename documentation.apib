FORMAT: 1A
HOST: http://polls.apiblueprint.org/

# Hello Books API with PostgreSQL Documentation
Hello books API is a RESTful Flask application for a simple application 
that helps manage a library and its processes like stocking, 
tracking and renting books. Books can be retrieved through the routes. Users can register, login, logout, reset password and change password.
An admin can add, edit and delete books. A regular user can borrow and return a books. User history and books not yet returned can also be retrieved.
Users can also delete their own accounts.

## Register User [/api/v1/auth/register]

To register an admin user pass admin in the url as such `'/api/v1/auth/register?admin=true'`
### Add a new user [POST]

+ Request (application/json)

    + Body
    
            {
                "name":"Mulandi Mike", "username":"mikey", "email":"qw@we.com",
                "password":"Hello123", "confirm password":"Hello123"
            }

+ Response 201 (application/json)

    + Body

            {
                "message":"Admin user successfully added"
            }

## Login User [/api/v1/auth/login]

### Login user [POST]

+ Request (application/json)

    + Body
    
            {
                "username":"mikey", "password":"Hello123"
            }

+ Response 200 (application/json)

    + Body

            {
                "message" : "Login successful"
                "token" : "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
            }
            
## Logout User [/api/v1/auth/logout]
A user needs to be logged in to access this endpoint using the login token
### Logout user [POST]

+ Request (application/json)

    + Headers
    
                Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXV...
            

+ Response 200 (application/json)

    + Body

            {
                "message" : "Successfully logged out"
            }
            
## Remove user account [/api/v1/auth/remove-user]
A user account can only be deleted if the user has returned all borrowed books
### Remove user account [DELETE]

+ Request (application/json)

    + Headers
    
                Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXV...
            

+ Response 200 (application/json)

    + Body

            {
                "message" : "user account successfully deleted"
            }
            
## Reset Password [/api/v1/auth/reset-password]

### Reset Password [POST]

+ Request (application/json)

    + Body
    
            {
                "username" : "mikey"
            }

+ Response 200 (application/json)

    + Body

            {
                "reset_password" : "B6OPPIM",
                "reset_token" : "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
            }
            
## Change Password [/api/v1/auth/change-password]

If token is from reset-password endpoint replace the field 'old_password' with 'reset_password'
and use the generated reset_password as the value

### Change password [PUT]

+ Request (application/json)

    + Body
    
            {
                "old_password" : "Hello123",
                "new_password" : "Iwasneverhere!",
                "confirm_password" : "Iwasneverhere!"
            }

+ Response 200 (application/json)

    + Body

            {
                "message" : "password changed successfully"
            }
            
## Books [/api/v1/books]

### Get All Books [GET]

+ Response 200 (application/json)

        {
            "1" : {"title": "Go Home, Susan", "author": "Jonas Jonas", "copies": 4, "edition": "3rd", "status":"available"},
            "2" : {'title': "Tiny Bugs", "author": "Mary", "copies": 2, "edition": "1st", "status":"available"}
            "3" : {'title': "Many Faces", "author": "Giddy", "copies": 4, "edition": "1st", "status":"available"}
        }

### Add a new book [POST]

You need to be an admin to add a book using this action. It takes a JSON
object containing details of a book.

+ Request (application/json)

    + Headers
    
                Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXV...
            
    + Body
    
            {
                "title":"I'm out", "author":"Patrick Swazey",
                "edition":"4th", "book_id":4, "copies": 4
            }

+ Response 201 (application/json)

    + Body

            {
                "message":"Book added successfully"
            }

## Books BookId [/api/v1/books/1]

### Get a Single Book [GET]

+ Response 200 (application/json)

        {
            "title": "Go Home, Susan", "author": "Jonas Jonas", "copies": 4, "edition": "3rd", "status":"available"
        }

### Edit a book [PUT]

You need to be an admin to edit a book using this action. It takes a JSON
object containing details of a book.

+ Request (application/json)

    + Headers
    
                Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXV...
            
    + Body
    
            {
                "title":"I'm outta here"
            }

+ Response 200 (application/json)

    + Body

            {
                "message":"Book 1 edited successfully"
            }
            
### Delete a book [DELETE]

You need to be an admin to delete a book using this action. It takes a JSON
object containing details of a book.

+ Request (application/json)

    + Headers
    
                Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXV...
            

+ Response 200 (application/json)

    + Body

            {
                "message":"Book 1 deleted successfully"
            }

## User Books [/api/v1/users/books/1]

A user needs to be logged in to access this endpoint using the login token

### Borrow a book [POST]

+ Request (application/json)

    + Headers
    
                Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXV...
            

+ Response 200 (application/json)

    + Body

            {
                "message":"book successfully checked out"
            }
            
### Return a book [PUT]

+ Request (application/json)

    + Headers
    
                Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXV...
            

+ Response 200 (application/json)

    + Body

            {
                "message":"book 1 successfully returned"
            }
            
## User History [/api/v1/users/books]

A user needs to be logged in to access this endpoint using the login token

### User History [GET]

+ Request (application/json)

    + Headers
    
                Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXV...
            

+ Response 200 (application/json)

    + Body

            {
                "mikey": 
                [
                    {
                        "book_id": 1,
                        "date_borrowed": "14-4-2018",
                        "date_returned": "None",
                        "returned": false
                    },
                    {
                        "book_id": 4,
                        "date_borrowed": "14-4-2018",
                        "date_returned": "15-4-2018",
                        "returned": true
                    }
                ]
            }
            
            
            
            